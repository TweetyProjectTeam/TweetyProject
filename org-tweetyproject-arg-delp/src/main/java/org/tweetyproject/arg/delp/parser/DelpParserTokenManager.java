/** Generated By:JavaCC: Do not edit this line. DelpParserTokenManager.java */
package org.tweetyproject.arg.delp.parser;

/** Token Manager. */
public class DelpParserTokenManager implements DelpParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output.
   * @param ds printstream
  */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 13);
      case 41:
         return jjStopAtPos(0, 14);
      case 44:
         return jjStopAtPos(0, 10);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 46:
         return jjStopAtPos(0, 8);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 126:
         return jjStopAtPos(0, 12);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 60:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 37)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 9:
                  if (curChar == 34 && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(4);
                  break;
               case 1:
                  jjAddStates(3, 4);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 4);
                  break;
               case 7:
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   6, 8, 9, 1, 2,
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\56", "\74\55", "\54",
"\55\74", "\176", "\50", "\51", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
/** Lexer state names. */
static final long[] jjtoToken = {
   0x7fc1L,
};
/** Lexer state names. */
static final long[] jjtoSkip = {
   0x3eL,
};
/** input stream */
protected SimpleCharStream input_stream;
/** jjrounds */
private final int[] jjrounds = new int[10];
/** jjstateSet */
private final int[] jjstateSet = new int[20];
/** current char */
protected char curChar;
/**
     * Constructor for initializing the token manager with the specified input stream.
     * <p>
     * This constructor sets up the token manager with the provided character stream.
     * It also verifies that the static flag of the character stream is not set.
     * </p>
     *
     * @param stream The {@link SimpleCharStream} to be used for token input.
     * @throws Error if the static flag of the character stream is set.
     */
    public DelpParserTokenManager(SimpleCharStream stream) {
      if (SimpleCharStream.staticFlag)
          throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
      input_stream = stream;
  }

  /**
   * Constructor for initializing the token manager with the specified input stream and lexical state.
   * <p>
   * This constructor sets up the token manager with the provided character stream and
   * switches to the specified lexical state.
   * </p>
   *
   * @param stream The {@link SimpleCharStream} to be used for token input.
   * @param lexState The initial lexical state to switch to.
   */
  public DelpParserTokenManager(SimpleCharStream stream, int lexState) {
      this(stream);
      SwitchTo(lexState);
  }

  /**
   * Reinitializes the token manager with a new input stream.
   * <p>
   * This method resets the token manager's state and prepares it to process tokens
   * from the new input stream. It also resets the current lexical state to the default.
   * </p>
   *
   * @param stream The new {@link SimpleCharStream} to be used for token input.
   */
  public void ReInit(SimpleCharStream stream) {
      jjmatchedPos = jjnewStateCnt = 0;
      curLexState = defaultLexState;
      input_stream = stream;
      ReInitRounds();
  }

  /**
   * Reinitializes the rounds used for token matching.
   * <p>
   * This method sets up the initial round values used during token matching.
   * It is invoked by the {@link #ReInit(SimpleCharStream)} method.
   * </p>
   */
  private void ReInitRounds() {
      int i;
      jjround = 0x80000001;
      for (i = 10; i-- > 0;)
          jjrounds[i] = 0x80000000;
  }

  /**
   * Reinitializes the token manager with a new input stream and lexical state.
   * <p>
   * This method reinitializes the token manager to process tokens from a new input stream
   * and switch to the specified lexical state.
   * </p>
   *
   * @param stream The new {@link SimpleCharStream} to be used for token input.
   * @param lexState The initial lexical state to switch to.
   */
  public void ReInit(SimpleCharStream stream, int lexState) {
      ReInit(stream);
      SwitchTo(lexState);
  }

  /**
   * Switches to the specified lexical state.
   * <p>
   * This method changes the current lexical state of the token manager to the specified
   * state. If the provided state is invalid, an error is thrown.
   * </p>
   *
   * @param lexState The lexical state to switch to.
   * @throws TokenMgrError if the specified lexical state is invalid.
   */
  public void SwitchTo(int lexState) {
      if (lexState >= 1 || lexState < 0)
          throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
      else
          curLexState = lexState;
  }


/**
 * Creates a new {@link Token} object based on the current state of the input stream and the matched token kind.
 *
 * <p>This method constructs a {@link Token} using information from the input stream, including the token's
 * image, line and column positions. The token's kind is determined by {@code jjmatchedKind}, and its image
 * is either a literal image from {@code jjstrLiteralImages} or the image from the input stream. The method
 * sets the token's position based on the current position in the input stream and returns the newly created token.</p>
 *
 * @return A {@link Token} object representing the current token, with its kind, image, and position set.
 */
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token.
 * @return the token
*/
public Token getNextToken()
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

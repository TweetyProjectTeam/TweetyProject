/*
 *  This file is part of "TweetyProject", a collection of Java libraries for
 *  logical aspects of artificial intelligence and knowledge representation.
 *
 *  TweetyProject is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version 3 as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 *  Copyright 2016 The TweetyProject Team <http://tweetyproject.org/contact/>
 */
/* Generated By:JavaCC: Do not edit this line. RpclCondensedProbabilityDistributionParserTokenManager.java */
package org.tweetyproject.logics.rpcl.parser.rpclcondensedprobabilitydistributionparser;

/** Token Manager. */
@SuppressWarnings("all")
public class RpclCondensedProbabilityDistributionParserTokenManager
      implements RpclCondensedProbabilityDistributionParserConstants {

   /** Debug output. */
   public static java.io.PrintStream debugStream = System.out;

   /**
    * Sets the debug stream for the parser.
    * <p>
    * This method allows the user to specify a {@link java.io.PrintStream} that
    * will be used to output
    * debug information during the parsing process. By default, this stream might
    * be set to {@code System.out}
    * or {@code System.err}, but this method allows redirecting it to any other
    * stream, such as a file stream
    * or a custom logging stream.
    * </p>
    *
    * @param ds The {@link java.io.PrintStream} to be used for debug output. This
    *           can be any valid {@link java.io.PrintStream},
    *           such as {@link java.lang.System#out} or
    *           {@link java.lang.System#err}.
    */
   public static void setDebugStream(java.io.PrintStream ds) {
      debugStream = ds;
   }

   private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
      switch (pos) {
         default:
            return -1;
      }
   }

   private static final int jjStartNfa_0(int pos, long active0) {
      return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
   }

   static private int jjStopAtPos(int pos, int kind) {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      return pos + 1;
   }

   static private int jjMoveStringLiteralDfa0_0() {
      switch (curChar) {
         case 44:
            return jjStopAtPos(0, 10);
         case 60:
            return jjStopAtPos(0, 12);
         case 61:
            return jjStopAtPos(0, 8);
         case 62:
            return jjStopAtPos(0, 13);
         case 123:
            return jjStopAtPos(0, 9);
         case 125:
            return jjStopAtPos(0, 11);
         default:
            return jjMoveNfa_0(0, 0);
      }
   }

   static private int jjMoveNfa_0(int startState, int curPos) {
      int startsAt = 0;
      jjnewStateCnt = 6;
      int i = 1;
      jjstateSet[0] = startState;
      int kind = 0x7fffffff;
      for (;;) {
         if (++jjround == 0x7fffffff)
            ReInitRounds();
         if (curChar < 64) {
            long l = 1L << curChar;
            do {
               switch (jjstateSet[--i]) {
                  case 0:
                     if ((0x3ff000000000000L & l) != 0L) {
                        if (kind > 6)
                           kind = 6;
                        jjCheckNAdd(2);
                     }
                     if ((0x3000000000000L & l) != 0L) {
                        if (kind > 7)
                           kind = 7;
                        jjstateSet[jjnewStateCnt++] = 4;
                     }
                     break;
                  case 1:
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 5)
                        kind = 5;
                     jjstateSet[jjnewStateCnt++] = 1;
                     break;
                  case 2:
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAdd(2);
                     break;
                  case 3:
                     if ((0x3000000000000L & l) == 0L)
                        break;
                     if (kind > 7)
                        kind = 7;
                     jjstateSet[jjnewStateCnt++] = 4;
                     break;
                  case 4:
                     if (curChar != 46)
                        break;
                     kind = 7;
                     jjCheckNAdd(5);
                     break;
                  case 5:
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(5);
                     break;
                  default:
                     break;
               }
            } while (i != startsAt);
         } else if (curChar < 128) {
            long l = 1L << (curChar & 077);
            do {
               switch (jjstateSet[--i]) {
                  case 0:
                  case 1:
                     if ((0x7fffffe07fffffeL & l) == 0L)
                        break;
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(1);
                     break;
                  default:
                     break;
               }
            } while (i != startsAt);
         } else {
            int i2 = (curChar & 0xff) >> 6;
            long l2 = 1L << (curChar & 077);
            do {
               switch (jjstateSet[--i]) {
                  default:
                     break;
               }
            } while (i != startsAt);
         }
         if (kind != 0x7fffffff) {
            jjmatchedKind = kind;
            jjmatchedPos = curPos;
            kind = 0x7fffffff;
         }
         ++curPos;
         if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
            return curPos;
         try {
            curChar = SimpleCharStream.readChar();
         } catch (java.io.IOException e) {
            return curPos;
         }
      }
   }

   static final int[] jjnextStates = {
   };

   /** Token literal values. */
   public static final String[] jjstrLiteralImages = {
         "", null, null, null, null, null, null, null, "\75", "\173", "\54", "\175",
         "\74", "\76", };

   /** Lexer state names. */
   public static final String[] lexStateNames = {
         "DEFAULT",
   };
   static final long[] jjtoToken = {
         0x3fe1L,
   };
   static final long[] jjtoSkip = {
         0x1eL,
   };

   /** input stream */
   static protected SimpleCharStream input_stream;
   static private final int[] jjrounds = new int[6];
   static private final int[] jjstateSet = new int[12];

   /** current Character */
   static protected char curChar;

   /**
    * Constructs a new
    * {@code RpclCondensedProbabilityDistributionParserTokenManager} with the given
    * input stream.
    *
    * @param stream The {@link SimpleCharStream} that provides the input for the
    *               token manager.
    * @throws TokenMgrError If the constructor is called more than once (i.e., the
    *                       input stream is not null).
    */
   public RpclCondensedProbabilityDistributionParserTokenManager(SimpleCharStream stream) {
      if (input_stream != null)
         throw new TokenMgrError(
               "ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
               TokenMgrError.STATIC_LEXER_ERROR);
      input_stream = stream;
   }

   /**
    * Constructs a new
    * {@code RpclCondensedProbabilityDistributionParserTokenManager} with the given
    * input stream and lexical state.
    *
    * @param stream   The {@link SimpleCharStream} that provides the input for the
    *                 token manager.
    * @param lexState The initial lexical state to which the token manager will
    *                 switch.
    * @throws TokenMgrError If the primary constructor throws an error due to
    *                       reinitialization.
    */
   public RpclCondensedProbabilityDistributionParserTokenManager(SimpleCharStream stream, int lexState) {
      this(stream);
      SwitchTo(lexState);
   }

   /**
    * Reinitializes the parser with a new input stream.
    * <p>
    * This method resets the internal state of the parser and prepares it to parse
    * a new input stream.
    * It sets the initial values for matched positions, state counters, and the
    * current lexical state.
    * After reinitializing, it also resets the round counters used for parsing.
    * </p>
    *
    * @param stream The new {@link SimpleCharStream} to be parsed. This stream
    *               provides the characters for token generation.
    */
   static public void ReInit(SimpleCharStream stream) {
      jjmatchedPos = jjnewStateCnt = 0;
      curLexState = defaultLexState;
      input_stream = stream;
      ReInitRounds();
   }

   /**
    * Reinitializes the round counters for parsing.
    * <p>
    * This method resets the values in the {@code jjrounds} array to their initial
    * states,
    * setting them to a large initial value. This ensures that the parser correctly
    * handles
    * new rounds of parsing.
    * </p>
    */
   static private void ReInitRounds() {
      int i;
      jjround = 0x80000001;
      for (i = 6; i-- > 0;)
         jjrounds[i] = 0x80000000;
   }

   /**
    * Reinitializes the parser with a new input stream and switches to the
    * specified lexical state.
    * <p>
    * This method reinitializes the parser with a new input stream, as well as
    * allowing for a
    * specific lexical state to be set. It first calls the
    * {@link #ReInit(SimpleCharStream)} method
    * to reset the parser's state with the provided stream, and then switches the
    * parser to the
    * given lexical state using {@link #SwitchTo(int)}.
    * </p>
    *
    * @param stream   The new {@link SimpleCharStream} to be parsed. This stream
    *                 provides the characters for token generation.
    * @param lexState The lexical state to switch to after reinitialization. The
    *                 lexical state determines how the input is tokenized.
    */
   static public void ReInit(SimpleCharStream stream, int lexState) {
      ReInit(stream);
      SwitchTo(lexState);
   }

   /**
    * Switches the parser to the specified lexical state.
    * <p>
    * This method allows the parser to change its lexical state, which affects how
    * the input stream
    * is tokenized. The lexical state defines the set of tokens that the parser
    * recognizes at any
    * given time. The method ensures that the lexical state provided is valid,
    * otherwise, it throws
    * a {@link TokenMgrError} with an appropriate error message.
    * </p>
    * <p>
    * The valid lexical state range is between 0 (inclusive) and 1 (exclusive). If
    * an invalid
    * lexical state is provided (i.e., a state outside this range), the method
    * throws an error and
    * leaves the current lexical state unchanged.
    * </p>
    *
    * @param lexState The lexical state to switch to. Must be between 0 (inclusive)
    *                 and 1 (exclusive).
    * @throws TokenMgrError if the specified lexical state is invalid (i.e., not
    *                       within the range [0,1)).
    */
   static public void SwitchTo(int lexState) {
      if (lexState >= 1 || lexState < 0)
         throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
               TokenMgrError.INVALID_LEXICAL_STATE);
      else
         curLexState = lexState;
   }

   /**
    * Fills and returns a new token based on the current matched input.
    *
    * @return A new {@link Token} representing the matched input.
    */
   static protected Token jjFillToken() {
      final Token t;
      final String curTokenImage;
      final int beginLine;
      final int endLine;
      final int beginColumn;
      final int endColumn;
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? SimpleCharStream.GetImage() : im;
      beginLine = SimpleCharStream.getBeginLine();
      beginColumn = SimpleCharStream.getBeginColumn();
      endLine = SimpleCharStream.getEndLine();
      endColumn = SimpleCharStream.getEndColumn();
      t = Token.newToken(jjmatchedKind, curTokenImage);

      t.beginLine = beginLine;
      t.endLine = endLine;
      t.beginColumn = beginColumn;
      t.endColumn = endColumn;

      return t;
   }

   static int curLexState = 0;
   static int defaultLexState = 0;
   static int jjnewStateCnt;
   static int jjround;
   static int jjmatchedPos;
   static int jjmatchedKind;

   /**
    * Get the next Token.
    *
    * @return the token
    */
   public static Token getNextToken() {
      Token matchedToken;
      int curPos = 0;

      EOFLoop: for (;;) {
         try {
            curChar = SimpleCharStream.BeginToken();
         } catch (java.io.IOException e) {
            jjmatchedKind = 0;
            matchedToken = jjFillToken();
            return matchedToken;
         }

         try {
            SimpleCharStream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = SimpleCharStream.BeginToken();
         } catch (java.io.IOException e1) {
            continue EOFLoop;
         }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedKind != 0x7fffffff) {
            if (jjmatchedPos + 1 < curPos)
               SimpleCharStream.backup(curPos - jjmatchedPos - 1);
            if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
               matchedToken = jjFillToken();
               return matchedToken;
            } else {
               continue EOFLoop;
            }
         }
         int error_line = SimpleCharStream.getEndLine();
         int error_column = SimpleCharStream.getEndColumn();
         String error_after = null;
         boolean EOFSeen = false;
         try {
            SimpleCharStream.readChar();
            SimpleCharStream.backup(1);
         } catch (java.io.IOException e1) {
            EOFSeen = true;
            error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
            if (curChar == '\n' || curChar == '\r') {
               error_line++;
               error_column = 0;
            } else
               error_column++;
         }
         if (!EOFSeen) {
            SimpleCharStream.backup(1);
            error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
         }
         throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
               TokenMgrError.LEXICAL_ERROR);
      }
   }

   static private void jjCheckNAdd(int state) {
      if (jjrounds[state] != jjround) {
         jjstateSet[jjnewStateCnt++] = state;
         jjrounds[state] = jjround;
      }
   }

   static private void jjAddStates(int start, int end) {
      do {
         jjstateSet[jjnewStateCnt++] = jjnextStates[start];
      } while (start++ != end);
   }

   static private void jjCheckNAddTwoStates(int state1, int state2) {
      jjCheckNAdd(state1);
      jjCheckNAdd(state2);
   }

}

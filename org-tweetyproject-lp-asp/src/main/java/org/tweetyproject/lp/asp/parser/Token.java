/* Generated By:JavaCC: Do not edit this line. Token.java Version 5.0 */
/* JavaCCOptions:TOKEN_EXTENDS=,KEEP_LINE_COL=null,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.tweetyproject.lp.asp.parser;

/**
 * Describes the input token stream.
 */

public class Token implements java.io.Serializable {

  /**
   * The version identifier for this Serializable class.
   * Increment only if the <i>serialized</i> form of the
   * class changes.
   */
  private static final long serialVersionUID = 1L;

  /**
   * An integer that describes the kind of this token.  This numbering
   * system is determined by JavaCCParser, and a table of these numbers is
   * stored in the file ...Constants.java.
   */
  public int kind;

  /** The line number of the first character of this Token. */
  public int beginLine;
  /** The column number of the first character of this Token. */
  public int beginColumn;
  /** The line number of the last character of this Token. */
  public int endLine;
  /** The column number of the last character of this Token. */
  public int endColumn;

  /**
   * The string image of the token.
   */
  public String image;

  /**
   * A reference to the next regular (non-special) token from the input
   * stream.  If this is the last token from the input stream, or if the
   * token manager has not read tokens beyond this one, this field is
   * set to null.  This is true only if this token is also a regular
   * token.  Otherwise, see below for a description of the contents of
   * this field.
   */
  public Token next;

  /**
   * This field is used to access special tokens that occur prior to this
   * token, but after the immediately preceding regular (non-special) token.
   * If there are no such special tokens, this field is set to null.
   * When there are more than one such special token, this field refers
   * to the last of these special tokens, which in turn refers to the next
   * previous special token through its specialToken field, and so on
   * until the first special token (whose specialToken field is null).
   * The next fields of special tokens refer to other special tokens that
   * immediately follow it (without an intervening regular token).  If there
   * is no such token, this field is null.
   */
  public Token specialToken;

  /**
     * An optional attribute value of the token.
     * <p>
     * Tokens that are not just syntactic sugar often contain meaningful values
     * that will be used later by the compiler or interpreter. This attribute value
     * is often different from the token's image. Subclasses of {@code Token} can
     * override this method to return a meaningful value.
     * </p>
     *
     * @return The value associated with this token, or {@code null} by default.
     */
    public Object getValue() {
      return null;
  }

  /**
   * Constructs a new {@code Token} with no initial kind or image.
   * <p>
   * This is a no-argument constructor that initializes the token with default values.
   * </p>
   */
  public Token() {}

  /**
   * Constructs a new {@code Token} with the specified kind.
   * <p>
   * The kind parameter typically represents the type of token, such as an identifier,
   * keyword, or operator. This constructor initializes the token with the given kind
   * and a {@code null} image.
   * </p>
   *
   * @param kind The kind of token.
   */
  public Token(int kind) {
      this(kind, null);
  }

  /**
   * Constructs a new {@code Token} with the specified kind and image.
   * <p>
   * This constructor initializes the token with the given kind and image, which represents
   * the textual representation of the token.
   * </p>
   *
   * @param kind The kind of token.
   * @param image The string representation of the token.
   */
  public Token(int kind, String image) {
      this.kind = kind;
      this.image = image;
  }

  /**
   * Returns the image of the token.
   * <p>
   * The image is the string representation of the token as it appears in the source code.
   * </p>
   *
   * @return The string representation of the token.
   */
  @Override
  public String toString() {
      return image;
  }

  /**
   * Returns a new Token object, by default. However, if you want, you
   * can create and return subclass objects based on the value of ofKind.
   * Simply add the cases to the switch for all those special cases.
   * For example, if you have a subclass of Token called IDToken that
   * you want to create if ofKind is ID, simply add something like :
   *
   *    case MyParserConstants.ID : return new IDToken(ofKind, image);
   *
   * to the following switch statement. Then you can cast matchedToken
   * variable to the appropriate type and use sit in your lexical actions.
   */
  /**
 * Creates and returns a new {@code Token} object with the specified kind and image.
 * <p>
 * This method allows for the creation of tokens with specific characteristics, such as
 * their kind (type) and their image (string representation). By default, it returns an
 * instance of the {@code Token} class. However, this method can be customized to return
 * different subclasses of {@code Token} depending on the value of {@code ofKind}.
 * </p>
 *
 * @param ofKind The kind of token to be created, typically representing a specific type
 *               such as an identifier, keyword, or operator.
 * @param image The string representation of the token. This may be {@code null} if the
 *              token does not require a specific image.
 * @return A new {@code Token} object with the specified kind and image.
 */
public static Token newToken(int ofKind, String image) {
  switch(ofKind) {
      default : return new Token(ofKind, image);
  }
}

/**
* Creates and returns a new {@code Token} object with the specified kind and a {@code null} image.
* <p>
* This method is a convenience method for creating tokens when no specific image is required.
* It calls {@link #newToken(int, String)} with {@code null} as the image.
* </p>
*
* @param ofKind The kind of token to be created, typically representing a specific type
*               such as an identifier, keyword, or operator.
* @return A new {@code Token} object with the specified kind and a {@code null} image.
*/
public static Token newToken(int ofKind) {
  return newToken(ofKind, null);
}

}
/* JavaCC - OriginalChecksum=5f0e2369a79e1e41a9bebe4722c558fd (do not edit this line) */
